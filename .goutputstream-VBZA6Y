#include <iostream>	
#include <stdlib.h>	
#include <cmath>	//per usare sqrt ecc..
#include <cstdlib>	//per usare la rand
#include <ctime>	//per usare la time
#include <cstring>	//per usare le stringhe
#include <fstream> 	//per usare i file I/O
#include <gtk/gtk.h>
#include <sstream>

using namespace std;

#include "struttura_dati.h"
#include "manche.h"
#include "distance.h"




//--------------------------------------------------------INIZIO DEFINIZIONE FUNZIONI MANCHE---------------------------------------------------
extern GtkBuilder *builder;


void riempi()
{
p[0].punt=auto_italiane;
p[0].dim=8;
strcpy(p[0].nome,"Case Automobilistiche Italiane");

p[1].punt=auto_giapponesi;
p[1].dim=11;
strcpy(p[1].nome,"Case Automobilistiche Giapponesi");

p[2].punt=tipi_cottura;
p[2].dim=12;
strcpy(p[2].nome,"Tipi di Cottura del Cibo");

p[3].punt=sport_palla;
p[3].dim=15;
strcpy(p[3].nome,"Sport in cui si usa la Palla");

p[4].punt=materie_scuola;
p[4].dim=15;
strcpy(p[4].nome,"Materie Scolastiche Medie");

p[5].punt=stati_sudamerica;
p[5].dim=12;
strcpy(p[5].nome,"Stati che fanno parte del Sud America");

p[6].punt=stati_eurozona;
p[6].dim=19;
strcpy(p[6].nome,"Stati dell'UE che usano l'Euro");

p[7].punt=citta_10milioni;
p[7].dim=15;
strcpy(p[7].nome,"Città con oltre 10 milioni di abitanti");

p[8].punt=citta_italiane15;
p[8].dim=15;
strcpy(p[8].nome,"Le 15 città italiane con più abitanti");

p[9].punt=vincitrici_serieA;
p[9].dim=16;
strcpy(p[9].nome,"Squadre che hanno vinto la serie A");

p[10].punt=regioni_italiane;
p[10].dim=20;
strcpy(p[10].nome,"Regioni Italiane");

p[11].punt=vincitrici_mondiali;
p[11].dim=8;
strcpy(p[11].nome,"Nazionali che hanno vinto i mondiali");

p[12].punt=ambienti_casa;
p[12].dim=15;
strcpy(p[12].nome,"Ambienti che fanno parte della casa");

p[13].punt=muscoli_principali;
p[13].dim=20;
strcpy(p[13].nome,"Muscoli principali");

p[14].punt=pianeti_sistema_solare;
p[14].dim=13;
strcpy(p[14].nome,"Pianeti, pianeti nani e plutoidi del sistema solare");

p[15].punt=harry_potter;
p[15].dim=27;
strcpy(p[15].nome,"Personaggi principali di Harry Potter");

p[16].punt=personaggi_simpson;
p[16].dim=30;
strcpy(p[16].nome,"Personaggi principali dei Simpson");

p[17].punt=i25_atleti;
p[17].dim=25;
strcpy(p[17].nome,"I 25 atleti più pagati al mondo");

/*
p[].punt=;
p[].dim=;
strcpy(p[].nome,"");

---film oscar
---serie tv/sitcom piu seguite
---multinazionali piu grandi
*/
}


//Dopo la pressione del pulsante PLAY in window1, si nasconde window2 e si apre window2
void gestione_partita (const char * player1, const char * player2)
{/*
int m1,m2,m3,m4,m5,m6;*/
int tot1=0;
int tot2=0;

//Nascondo window1
GtkWidget * window1 = GTK_WIDGET(gtk_builder_get_object(builder, "window1")) ;
gtk_widget_hide(window1);

//Apro window2
GtkWidget * window2 = GTK_WIDGET(gtk_builder_get_object(builder, "window2")) ;
gtk_widget_show_all(window2);

	//Inizializzo le varie Label (Player1, player2, manche disputate...)
	GtkLabel * label_player1 = GTK_LABEL(gtk_builder_get_object(builder, "label12"));
	gtk_label_set_text(label_player1, player1);

	GtkLabel * label_player2 = GTK_LABEL(gtk_builder_get_object(builder, "label13"));
	gtk_label_set_text(label_player2, player2);

	GtkLabel * manches_disp = GTK_LABEL(gtk_builder_get_object(builder, "label17"));
	gtk_label_set_text(manches_disp, "0  di  3");

a

	GtkLabel * punteggio = GTK_LABEL(gtk_builder_get_object(builder, "label18"));
	gtk_label_set_text(punteggio, "0  -  0");

	GtkLabel * turno = GTK_LABEL(gtk_builder_get_object(builder, "label19"));
	gtk_label_set_text(turno, player1);

/*
srand(time(0));
	m1=rand()%liste;

	cout<<"\n----------------------------------PRIMA MANCHE----------------------------------"<<endl;
	manche(m1,player1,tot1);

	do
		m2=rand()%liste;
	while(m2==m1);

	manche(m2,player2,tot2);
	

	do
		m3=rand()%liste;
	while((m3==m1)||(m3==m2));

	cout<<"\n---------------------------------SECONDA MANCHE---------------------------------"<<endl;
	manche(m3,player1,tot1);

	do
		m4=rand()%liste;
	while((m4==m1)||(m4==m2)||(m4==m3));

	manche(m4,player2,tot2);


	do
		m5=rand()%liste;
	while((m5==m1)||(m5==m2)||(m5==m3)||(m5==m4));
	
	cout<<"\n----------------------------------TERZA MANCHE----------------------------------"<<endl;
	manche(m5,player1,tot1);

	do
		m6=rand()%liste;
	while((m6==m1)||(m6==m2)||(m6==m3)||(m6==m4)||(m6==m5));

	manche(m6,player2,tot2);

	if (tot1>tot2)
		cout<<"\n\n\t\t\tVince "<<player1<<" "<<tot1<<" a "<<tot2<<endl;
	else
		{
		if (tot2>tot1)
			cout<<"\n\n\t\t\tVince "<<player2<<" "<<tot2<<" a "<<tot1<<endl;
		else
			cout<<"\n\n\t\t\tLa partita è finita "<<tot1<<" pari"<<endl;
		}
*/
return;
}




void manche(int x,const char * player,int &tot)
{
char parola[max_nome];
int y;
int errori=0;
int ripetizioni=0;

int * visited = new int [p[x].dim];

for(int i=0; i<p[x].dim; i++)
	visited[i]=0;


	cout<<"\n"<<player<<endl;
	cout<<"\n"<<p[x].nome<<endl;
	
	while(cin.getline(parola,max_nome))
		{
		int dist=min_dist(parola,x,y);

		int len=strlen(parola);

		if ( (visited[y]==0) && (((len<=4) && (dist<2)) || ((len<=8) && (len>4) && (dist<3)) || ((len<=13) && (len>8) && (dist<4)) || ((len>13) && (dist<5))) )
			{
			cout<<"\t\tSI\t+"<<p[x].punt[y].valore<<"\t"<<p[x].punt[y].nome<<endl;
			tot+=p[x].punt[y].valore;
			visited[y]=1;
			}
		else
			{
			if ( (visited[y]!=0) && (((len<=4) && (dist<2)) || ((len<=8) && (len>4) && (dist<3)) || ((len<=13) && (len>8) && (dist<4)) || ((len>13) && (dist<5))) )
				{
				ripetizioni++;
				cout<<"\t\tRIPETIZIONE\t-"<<(ripetizioni*2)<<endl;
				tot-=(ripetizioni*2);
				}
			else
				{
				errori++;
				cout<<"\t\tERRORE\t-"<<errori<<endl;
				tot-=errori;
				}
			}
		}
	cin.clear();

delete [] visited;

return;
}

//--------------------------------------------------------FINE DEFINIZIONE FUNZIONI MANCHE---------------------------------------------------





